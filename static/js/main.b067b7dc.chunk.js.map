{"version":3,"sources":["StarWarsPeople.js","App.js","serviceWorker.js","index.js"],"names":["starWarsPeople","_ref","name","height","mass","birthDate","react_default","a","createElement","className","App","state","people","componentDidMount","fetch","then","response","json","data","_this","setState","results","catch","console","log","SWPeopleArr","this","map","SWPpl","src_StarWarsPeople","key","birth_year","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAeeA,SAZQ,SAAAC,GAAsC,IAApCC,EAAoCD,EAApCC,KAAMC,EAA8BF,EAA9BE,OAAQC,EAAsBH,EAAtBG,KAAMC,EAAgBJ,EAAhBI,UACzC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,UAAMN,GACNI,EAAAC,EAAAC,cAAA,oBAAaL,GACbG,EAAAC,EAAAC,cAAA,kBAAWJ,GACXE,EAAAC,EAAAC,cAAA,SAAKN,EAAL,yBAAmCG,MCgChCK,oNApCbC,MAAQ,CACNC,OAAQ,MAIVC,kBAAoB,WAClBC,MAAM,+BACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIC,EAAKC,SAAS,CAAER,OAAQM,EAAKG,YAC1CC,MAAM,kBAAMC,QAAQC,IAAI,2GAMzB,IAAMC,EAAcC,KAAKf,MAAMC,OAAOe,IAAI,SAAAC,GAAK,OACzCtB,EAAAC,EAAAC,cAACqB,EAAD,CACIC,IAAKF,EAAM1B,KACXA,KAAM0B,EAAM1B,KACZC,OAAQyB,EAAMzB,OACdC,KAAMwB,EAAMxB,KACZC,UAAWuB,EAAMG,eAE3B,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,kCAEFF,EAAAC,EAAAC,cAAA,WAASC,UAAU,mBACfgB,WA9BQO,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.b067b7dc.chunk.js","sourcesContent":["import React from 'react';\nimport './StarWarsPeople.css';\n\nconst starWarsPeople = ({name, height, mass, birthDate }) => {\n    return (\n        <div className='card'>\n            <h2>{ name }</h2>\n            <p>Height: { height }</p>\n            <p>Mass: { mass }</p>\n            <p>{ name } was born in the year { birthDate }</p>\n        </div>\n    )\n}\n\n\nexport default starWarsPeople;\n\n","import React, { Component } from 'react';\nimport StarWarsPeople from './StarWarsPeople';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    people: []\n  }\n\n\n  componentDidMount = () => {\n    fetch('https://swapi.co/api/people')\n    .then(response => response.json())\n    .then(data => this.setState({ people: data.results }))\n    .catch(() => console.log('FAILED TO LOAD YOUR DATA SIR'))\n\n\n  }\n\n  render() {\n    const SWPeopleArr = this.state.people.map(SWPpl => \n          <StarWarsPeople \n              key={SWPpl.name}\n              name={SWPpl.name} \n              height={SWPpl.height} \n              mass={SWPpl.mass} \n              birthDate={SWPpl.birth_year} \n          />)\n    return (\n      <div className=\"App\">\n      <header>\n        <h1>Luke, Use An API!!!</h1>\n      </header>\n      <section className='peopleContainer'>\n        { SWPeopleArr }\n      </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}